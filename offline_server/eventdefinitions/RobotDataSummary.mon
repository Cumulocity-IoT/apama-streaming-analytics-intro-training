package apamax.training;

/** This event is returned in response to a RobotDataRequest and contains the current data of the robot.
 * 
 * To receive over DES you have to subscribe to the CHANNEL for the event and then write a listener or a stream.
 * The listener should include the requestId you sent with the request.
 *
<code>
  monitor.subscribe(RobotDataSummary.CHANNEL);
  on all RobotDataSummary(requestId=requestId) as rds { doSomething(); }
</code>
 * @see RobotDataRequest
 */
event RobotDataSummary {
			
	/** The ID of the robot we requested. */
	integer id;
	/** The requestId which was provided in the request message. */
	integer requestId;
	/** The temperature of sensor 1 */
	float temperature1;
	/** The temperature of sensor 2 */
	float temperature2;
	// Autogenerated by DES export - do not modify
	/**
	 * The Apama channel associated with this event type.
	 * This channel can be used to send events of this type to DES, subscribe to receive events of this type from DES,
	 * unsubscribe from receiving events of this type from DES, and get the sending or receiving chain associated with this event type.
	 * 
	 * Sending, subscribing and unsubscribing to this channel is no different than interacting with any other Apama channel.
	 * To get the Chain instance associated with sending or receiving of this type, use the com.softwareag.connectivity.ConnectivityPlugins.getChainByChannel action.
	 * 
	 * Note: Events of this type cannot be sent or received reliably unless the com.softwareag.connectivity.MessageId annotation is used for them.
	 */
	constant string CHANNEL := "des:apamax.training.RobotDataSummary";
	// End of autogeneration
}