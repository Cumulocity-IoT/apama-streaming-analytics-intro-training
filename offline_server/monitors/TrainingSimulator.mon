package apamax.training;

/** This monitor generates all the simulation data for the training. @private */
monitor TrainingSimulator {
	action onload() {
		log "Loaded monitor TrainingSimulator" at INFO;
		(new RobotManager).init();
		
		// it's important for the script that the 1st one be a normal one. Update the examples if you change it.
		(new RobotSimulator).startNormalSimulation();
		(new RobotSimulator).startNormalSimulation();
		(new RobotSimulator).startNormalSimulation();
		(new RobotSimulator).startDeadSimulation();
		// it's important for the script that this be the 5th one. Update the examples if you change it.
		(new RobotSimulator).startHotSimulation();
		(new RobotSimulator).startVariableSimulation();
		(new RobotSimulator).startSlowSimulation();
		(new RobotSimulator).startSpikeySimulation();
		(new RobotSimulator).startSimulationWithErrors();
		(new RobotSimulator).startStuckSensor(0.0);
		(new RobotSimulator).startStuckSensor(20.0);
		(new RobotSimulator).startSingleSensor();
		(new RobotSimulator).startIncreasingSimulation();
		
		spawn forwardAlerts() to context("AlertForwarder");
		spawn handleSubscribers();
	}
	
	action handleSubscribers()
	{
		on all com.apama.oob.ReceiverConnected() as rc {
			log "new connection of "+rc.componentName+" from "+rc.address+" with extra params "+rc.extraParams.toString() at INFO;
			string host := rc.address.replace(":.*", "");
			com.apama.correlator.Component.attachAsEventConsumerTo(
			          host, 15903,
			          ["apamax.training.Alert", "apamax.training.RobotDataRequest", "apamax.training.RequestRobotStatus"],
			          true, com.apama.correlator.Component.CONNECT_PARALLEL);
		}
		on all com.apama.oob.ReceiverDisconnected() as rd {
			log "new connection of "+rd.componentName+" from "+rd.address+" with extra params "+rd.extraParams.toString() at INFO;
			string host := rd.address.replace(":.*", "");
			com.apama.correlator.Component.detachAsEventConsumerFrom(
			          host, 15903,
			          ["apamax.training.Alert", "apamax.training.RobotDataRequest", "apamax.training.RequestRobotStatus"],
			          com.apama.correlator.Component.CONNECT_PARALLEL);
		}
		
	}
	
	action forwardAlerts()
	{
		monitor.subscribe(Alert.CHANNEL);
		on all Alert() as a {
			send a to "dashboard:"+Alert.CHANNEL;
		}
	}
}
