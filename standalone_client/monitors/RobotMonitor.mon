package apamax.training;
using com.apama.aggregates.mean;
using com.apama.aggregates.min;
using com.apama.aggregates.max;
using com.apama.aggregates.stddev;
using com.apama.aggregates.count;
using com.apama.aggregates.last;
using com.apama.aggregates.first;

/** This monitor will monitor for problems with the robot sensors and send alerts when we find them  */
monitor RobotMonitor {
	
	integer counter; // global variables go here and are available all the time in this monitor instance
	
	/** This action is a dummy to demonstrate some basic syntax */
	action processSomething(integer i, sequence<integer> li) returns float
	{
		float f; // declare a primitive variable
		dictionary<string, sequence<integer> > dssf; // a more complex type
		f := i.toFloat(); // assignment uses := and type conversions are explicit.
		if i = 1 { // comparison with =
			return processSomething(i-1, li); // call the method recursively
		}
		
		return 0.0; // explicitly a float variable
	}
	
	/** This is the action which will be run when the monitor starts */
	action onload() {		
		// Receive events of the type TemperatureReading.
		// This is how DES receives events. Other systems 
		// could define channels on other axes
		monitor.subscribe(TemperatureReading.CHANNEL);
		
		// Insert your code here...
		
		// Once the code is ready, start receiving events
		com.softwareag.connectivity.ConnectivityPlugins.onApplicationInitialized();
		// so we know it's ready
		log "Loaded monitor RobotMonitor" at INFO;
	}
}
