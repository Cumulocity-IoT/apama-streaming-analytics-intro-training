package apamax.training;

/**
 * An event sent out by the robot manager whenever the status of a robot changes or in response to a RequestRobotStatus event.
 * 
 * To receive over DES you have to subscribe to the CHANNEL for the event and then write a listener or a stream:
 *
<code>
  monitor.subscribe(RobotStatus.CHANNEL);
  on all RobotStatus() as rs { doSomething(); }
</code>
 * 
 * @see RequestRobotStatus
 */
event RobotStatus {
			
	/** The ID of the robot. */
	integer id;
	/** The current status of the robot - OK or an error message. */
	string status;
	// Autogenerated by DES export - do not modify
	/**
	 * The Apama channel associated with this event type.
	 * This channel can be used to send events of this type to DES, subscribe to receive events of this type from DES,
	 * unsubscribe from receiving events of this type from DES, and get the sending or receiving chain associated with this event type.
	 * 
	 * Sending, subscribing and unsubscribing to this channel is no different than interacting with any other Apama channel.
	 * To get the Chain instance associated with sending or receiving of this type, use the com.softwareag.connectivity.ConnectivityPlugins.getChainByChannel action.
	 * 
	 * Note: Events of this type cannot be sent or received reliably unless the com.softwareag.connectivity.MessageId annotation is used for them.
	 */
	constant string CHANNEL := "des:apamax.training.RobotStatus";
	// End of autogeneration
}